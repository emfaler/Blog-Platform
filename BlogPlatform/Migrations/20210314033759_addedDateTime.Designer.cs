// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blog_template_practice;

namespace BlogPlatform.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20210314033759_addedDateTime")]
    partial class addedDateTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("blog_template_practice.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Culture"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Travel"
                        });
                });

            modelBuilder.Entity("blog_template_practice.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Ina Garten",
                            Body = "EVOO, Fresh herbs, and carbs.",
                            CategoryId = 1,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 350, DateTimeKind.Local).AddTicks(7593),
                            Title = "Italian Cooking 101"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Ira Glass",
                            Body = "So many new podcasts to listen. Here are our picks.",
                            CategoryId = 2,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 361, DateTimeKind.Local).AddTicks(4196),
                            Title = "Podcast Mania"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Rick Steves",
                            Body = "Hop on a train and get moving",
                            CategoryId = 3,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 361, DateTimeKind.Local).AddTicks(4331),
                            Title = "Norway In a Day"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Tanzena Vega",
                            Body = "The canals do not smell and are great for long rides on a hot day",
                            CategoryId = 1,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 361, DateTimeKind.Local).AddTicks(4340),
                            Title = "Venice"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Michelle Pfiefer",
                            Body = "Britney's new single is an offensively crafted BOP for the ages.",
                            CategoryId = 2,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 361, DateTimeKind.Local).AddTicks(4348),
                            Title = "New Music Friday"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Gloria Estaban",
                            Body = "You can go anywhere with these direct flights to top destinations.",
                            CategoryId = 3,
                            PublishDate = new DateTime(2021, 3, 13, 22, 37, 58, 361, DateTimeKind.Local).AddTicks(4357),
                            Title = "50 Direct Flights"
                        });
                });

            modelBuilder.Entity("blog_template_practice.Models.Content", b =>
                {
                    b.HasOne("blog_template_practice.Models.Category", "Category")
                        .WithMany("Content")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
